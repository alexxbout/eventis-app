<template>
    <!-- Card wrapper -->
    <div :style="{ height: (topCardSize + bottomCardSize) + 'px' }" class="w-full">

        <!-- Card -->
        <div ref="card" @touchstart="touchStart" @touchend="touchEnd" @click="openCard" :style="{ height: (topCardSize + bottomCardSize) + 'px' }" class="relative w-full flex flex-col overflow-hidden shadow-card rounded-2xl bg-white">

            <i ref="close" @click="closeCard" class="bi bi-x-circle-fill absolute opacity-0 top-5 right-5 text-3xl text-white z-10"></i>

            <!-- Image -->
            <div ref="topCard" :style="{ backgroundImage: 'url(' + data.image + ')', height: topCardSize + 'px'}" class="w-full bg-no-repeat bg-cover bg-center">
            </div>

            <!-- Info -->
            <div :style="{ height: bottomCardSize + 'px' }" class="w-full flex flex-col p-5">
                <span :class="{ 'text-custom-gray': !data.ended, 'text-custom-red': data.ended }" class="uppercase font-semibold text-sm"> {{ data.ended ? "Évènement terminé" : "Évènement en cours"
                }}</span>

                <span class="text-2xl font-semibold text-black">{{ data.title }}</span>

                <span class="text-custom-gray text-sm font-light">{{ data.subtitle }}</span>
            </div>

            <div class="h-0">
                <div class="p-5 gap-y-5 flex flex-col text-custom-gray">
                    <span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt dignissimos ipsum optio numquam laudantium similique distinctio dolores modi, obcaecati id delectus, velit, expedita quis quam sapiente tempora beatae exercitationem illo!</span>
                    <span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam ratione quos veritatis, repudiandae, exercitationem, amet fuga aperiam nihil quibusdam explicabo voluptatum rem. Odit veniam maiores alias unde sapiente voluptate laboriosam adipisci harum, in veritatis ea placeat provident sed sequi, minus pariatur exercitationem vitae! Nemo sequi in dolor sint eum id tenetur, accusantium perferendis incidunt molestias esse adipisci cum expedita hic inventore quo dolore exercitationem autem quae voluptates nostrum molestiae voluptatum reiciendis asperiores? Quae, necessitatibus omnis explicabo illum inventore fugiat ea reprehenderit saepe dignissimos tenetur esse ad cumque nam fugit cupiditate doloribus magnam non accusamus commodi consequuntur porro mollitia ullam. Culpa maiores, mollitia labore est ullam commodi sequi sunt unde suscipit, consequatur excepturi, quaerat amet! Quis ea, soluta dignissimos rerum quae nemo laborum, cupiditate amet, blanditiis dolores quisquam voluptatibus eum aspernatur sequi sit. Sed fuga eos, corrupti ea optio quibusdam reiciendis ipsa odit tempora animi amet sit, voluptatum sequi nisi velit!</span>
                </div>
            </div>
        </div>
    </div>
</template>

<script setup lang="ts">
import { IApp } from "../App.vue";
import { ref, PropType, onMounted } from "vue";
import { gsap } from "gsap";

export interface IEvent {
    title: string;
    subtitle: string;
    ended: boolean;
    image: string;
}

const topCardSize = ref(320);
const bottomCardSize = ref(115);

const opened = ref(false);

const props = defineProps({
    data: {
        type: Object as PropType<IEvent>,
        required: true
    },
    funcs: {
        type: Object as PropType<IApp>,
        required: true
    }
});

const card = ref<HTMLElement>();
const topCard = ref<HTMLElement>();
const close = ref<HTMLElement>();

onMounted(() => {
    // Handle ref errors
    if (!card.value) {
        console.log("card is undefined");
        return;
    }
});

function openCard() {
    if (!card.value || !topCard.value || !close.value || opened.value) return;

    opened.value = true;

    props.funcs.hideNavbar();

    card.value.style.transform = "scale(1)";

    card.value.classList.remove("shadow-card");

    gsap.to(close.value, {
        opacity: 1,
        duration: 0.6,
        ease: "power4.out"
    });

    gsap.to(card.value, {
        translateX: card.value.getBoundingClientRect().left * -1 + "px",
        translateY: card.value.getBoundingClientRect().top * -1 + "px",
        width: "100vw",
        height: "100vh",
        borderRadius: "0",
        zIndex: "10",
        duration: 0.6,
        ease: "power4.out"
    });

    props.funcs.setFixed();
}

function closeCard() {
    if (!card.value || !topCard.value || !close.value || !opened.value) return;

    props.funcs.showNavbar();

    card.value.classList.add("shadow-card");

    gsap.to(close.value, {
        opacity: 0,
        duration: 0.6,
        ease: "power4.out"
    });

    gsap.to(card.value, {
        translateX: "0",
        translateY: "0",
        width: "100%",
        height: (topCardSize.value + bottomCardSize.value) + "px",
        borderRadius: "1rem",
        zIndex: "1",
        duration: 0.6,
        ease: "power4.out"
    }).then(() => {
        opened.value = false;
    });

    props.funcs.removeFixed();
}

function touchStart() {
    if (!card.value || opened.value) return;

    gsap.to(card.value, {
        scale: 0.95,
        duration: 0.5
    });
}

function touchEnd() {
    if (!card.value || opened.value) return;

    gsap.to(card.value, {
        scale: 1,
        duration: 0.5
    });
}

</script>